<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_right</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initialise variables 

grav = 0.5 
hsp = 0; //horizontal speed
vsp = 0; //vertical speed
jumpspeed = 15; 
movespeed = 10; //by pixels



depth = 0; 
audio_play_sound (snd_thunder, 100, false); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//MOVEMENT 
 
//player input 
key_right = keyboard_check(vk_right) || keyboard_check(ord("D")); 
key_left = -(keyboard_check (vk_left) || keyboard_check(ord("A"))); 

//react to input 
move = key_left + key_right; // 1 is right, 0 if both are pressed, or -1 is left
hspeed = move * movespeed; //1 or -1 * the speed or just nothing

x += hsp;  

//sprite animation 
if key_left == -1 { 
    sprite_index = spr_left; 
    } 
else if key_right == 1  { 
    sprite_index = spr_right; 
    } 
else if move == 0 &amp;&amp; sprite_index = spr_left{  
        sprite_index = spr_idleleft; 
    } 
else if move == 0 &amp;&amp; sprite_index = spr_right{ 
        sprite_index = spr_idleright; 
    }

/*
//horizontal collisions 
if (place_meeting(x+hsp,y,obj_wall))
{
    while (!place_meeting(x+sign(hsp),y,obj_wall)) 
    { 
        x += sign(hsp); 
    } 
    hsp = 0; 
}

x += hsp; //add speed to x coordinate 

//vertical collisions 
if (place_meeting (x,y+vsp,obj_wall)) 
{
    while (!place_meeting(x,y+sign(hsp),obj_wall)) //while it hasn't hit the wall by each pixel 
    {
    y += sign(vsp);
    } 
    vsp = 0; 
}
y += vsp; //add speed to y coordinate*/

//Doors 
if room = rm_living object_set_persistent(obj_player,true);
         if room = rm_basement object_set_persistent(obj_player,false); 
         
if keyboard_check_pressed (ord("Q")){
    if position_meeting (x,y,obj_doormain2){
        room_goto(rm_main); 
        audio_play_sound(snd_door, 10, false); 
    }
    if position_meeting (x,y,obj_doorbasement){ 
        room_goto(rm_basement); 
        audio_play_sound(snd_door, 10, false); 
    } 
    if position_meeting (x,y,obj_doordining){ 
        room_goto(rm_living); 
        audio_play_sound(snd_door, 10, false);  
    } 
    if position_meeting (x,y,obj_backyarddoor){ 
        room_goto(rm_main); 
        audio_play_sound(snd_door, 10, false); 
    } 
    if position_meeting (x,y,obj_doormain){ 
        room_goto(rm_main);
        audio_play_sound(snd_door, 10, false); 
    }
    if position_meeting (x,y,obj_backdoor2){
        room_goto(rm_backyard); 
        audio_play_sound(snd_door, 10, false); 
    }
    if room  = rm_main { 
        if obj_player.x &gt; 3600 { 
        room_goto(rm_backyard); 
        }
    }   
}

 



//stop them leaving the room 
x=clamp(x, 0, (room_width-152));
// sets max min of x value  
//counted from 0,0 of player, sprite width is 152 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
